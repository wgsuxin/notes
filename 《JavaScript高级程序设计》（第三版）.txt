//
第 1 章===============================================================
1、1995 年 2 月发布的 Netscape Navigator 2 开发名为 LiveScript 的脚本语言，它在服务器上的名字叫 LiveWire，Netscape 为了搭上媒体热炒 Java 的顺风车，发布前夕为了搭上当时热炒的 Java 临时把 LiveScript 改名为 JavaScript；1996 年，Netscape Navigator 3 捆绑发布了 JavaScript 1.1；1997 年，内置 JavaScript 1.2 的 Netscape Navigator 4 发布；Netscape 6 以后改为 Mozilla，Netscape 7 以后重心转向 Firefox，在 2004 年后 Firefox 强势崛起
2、IE 对 JavaScript （ECMAScript）的实现——JScript 是基于 Netscape JavaScript 1.0 开发，于 1996 年 8月随同 Internet Explorer 3.0 发布
3、1997 年，以 JavaScript 1.1 为蓝本的建议被提交给了欧洲计算机制造商协会（ECMA，European Computer Manufacturers Association）。该协会指定 39 号技术委员会（TC39，Technical Committee #39）负责“标准化一种通用、跨平台、供应商中立的脚本语言的语法和语义”
4、TC39 制定了 ECMA-262——定义一种名为 ECMAScript（发音为“ek-ma-script”）的新脚本语言的标准
5、1998 年 ISO/IEC（International Organization for Standardization and International Electrotechnical Commission，国标标准化组织和国际电工委员会）也采用了 ECMAScript 作为标准（即 ISO/IEC-16262）
6、完整的 JavaScript 实现分为三部分： 核心（ECMAScript，提供核心语言功能）、文档对象模型（DOM，提供与网页交互的方法和接口）、 浏览器对象模型（BOM，提供与浏览器交互的方法和接口）
7、Web 浏览器只是 ECMAScript 实现可能的宿主环境之一
8、ECMA-262 标准规定了语言的如下组成部分：语法、类型、语句、关键字、保留字、操作符、对象
9、ECMAScript 3.1 成为 ECMA-262 第 5 版，并于 2009 年 12 月 3 日正式发布
10、DOM1 级（DOM Level 1）于 1998 年 10 月成为 W3C（World Wide Web Consortium，万维网联盟） 的推荐标准。DOM1 级由两个模块组成：DOM 核心（DOM Core）和 DOM HTML
11、DOM2 级在 DOM1 基础上扩充了（DHTML 一直都支持的）鼠标和用户界面事件、范围、遍历（迭代 DOM 文档的方法）等细分模块，而且通过对象接口增加了对 CSS（Cascading Style Sheets，层叠样式表）的支持
12、DOM3 扩展了DOM 加载和保存（DOM Load and Save）模块、新增了 DOM 验证（DOM Validation）模块、开始支持 XML 1.0 规范，Firefox 1完全支持 DOM1 级及DOM2 级，IE5.5、IE6、IE7 仅支持 DOM1 级，IE8 修复 bug，IE9+ 支持 DOM3
13、浏览器对象模型（BOM，Browser Object Model）表示访问和操作浏览器窗口及所有针对浏览器的 JavaScript 扩展

第 2 章================================================================
1、HTML 4.01 <script> 定义了 6 个属性： async charset defer language（已废弃） src type
2、使用 <script> 两种方式：内嵌 JS 代码，用 src 包含外部 JS 文件
3、内嵌方式代码中不能出现 </script> 字串，此串代表 script 块结束，后面还有代码的话解析会报错，可用转义字符“/”解决此问题如下所示： "<\/script>"
4、包含外部 JS 文件必须使用 src 属性，文件一般为 .js 后缀名，不过解析器不检查后缀，所以使用 .php 等也没问题，文件内代码不需要添加 <script> 标签了，使用了src后内嵌代码会被忽略
5、浏览器会按照 <script> 元素在页面中出现的先后顺序对它们依次进行下载、解析、执行（包含 defer async 例外）
6、延迟脚本属性 defer 只适用于外部脚本文件，表明立即下载但延迟执行，一般是在页面解析完毕后 DOMContentLoaded 事件触发前执行，不过一个页面最好只包含一个延迟脚本，多个时实际运行结果不可预料
7、异步脚本属性 async 也仅用于外部脚本，会在页面的 load 事件前执行，但可能会在 DOMContentLoaded 事件触发之前或之后执行，多个时不保证先后顺序执行
8、脚本位置一般放在 body 标签前，这样不会阻止界面呈现
9、要包含不需要解析内容可以使用 CData 片段，示例：<![CDATA[ 非解析内容 ]]>
10、为了兼容较早的浏览器能正常解析 <script> 标签，使用 <script><!-- 开头，//--></script> 结尾
11、采用外部文件优势：提高维护性、使浏览器缓存提高访问速度、更容易扩展以适应未来其他需求
12、IE 5.5引入文档模式，通过 doctype 切换，最初包含 混杂模式（quirks mode）和标准模式（standards mode）
13、为了使浏览器不支持或禁用了 JavaScript 时平稳退化，采用 <noscript> 标签显示替代内容

第 3 章================================================================
1、语言的核心都必然会描述这门语言最基本的工作原理，包含语法、操作符、数据类型、内置功能等
2、语法：ECMAScript 中的一切（变量、函数名和操作符）都区分大小写
3、语法：标识符（或者叫变量名，ECMAScript 惯例标识符采用驼峰大小写，以字母、下划线、美元符开头，可包含数字、字母、下划线、美元符以及扩展的 ASCII或 Unicode字母字符（如 À和 Æ，但不推荐），另外不能使用 关键字、保留字、 true 、 false 和 null 等语言本身已经使用的字符串）
4、语法：注释（使用类 C 风格的注释，包括单行注释和块级注释）
5、语法：ECMAScript 5 引入了严格模式（strict mode）的概念，如要启用严格模式，需要在文件顶部（作用于整个文件）或函数内部上方（仅作用于该函数）添加： "use strict";
6、语法：语句一般以一个分号结尾，省略分号则由解析器确定语句结尾；
7、关键字（即用于本身语法的某些单词或字串）和保留字（即在这门语言中还没有任何特定的用途，但可能会在将来被用作关键字）
8、变量可以用来保存任何类型的数据
9、给未经声明的变量赋值在严格模式下会导致抛出 ReferenceError 错误
10、检测给定变量的数据类型可以用 typeof 操作符，见 3.4.1 节
11、包含 undefined 值的变量与尚未定义的变量是不一样的，具体来说如果变量是 undefined 则可以进行各种操作，而未定义的变量只能使用 typeof 检测数据类型，用于任何其他操作都会导致“ReferenceError：is not defined”错误，但是通过 typeof 检测都是 'undefined'
12、null 值表示一个空对象指针，所以使用 typeof 操作符检测 null 值时会返回 "object"
13、实际上， undefined 值是派生自 null 值，因此 ECMA-262规定对它们的相等性测试要返回 true 
14、Boolean 类型转换规则参见 3.4.4 节
15、Number 类型使用 IEEE754 格式来表示整数和浮点数值（浮点数值的最高精度是 17 位小数，会有舍入误差，如计算 0.1 + 0.3 结果不是 0.3，而是 0.30000000000000004）
16、八进制字面值的第一位必须是零（0），然后是八进制数字序列（0～7）。如果字面值中的数值超出了范围（如09），那么前导零将被忽略，后面的数值将被当作十进制数值解析，八进制字面量在严格模式下无效会导致错误
17、十六进制字面值的前两位必须是 0x，后跟任何十六进制数字（0～9 及 A～F）
18、n/a（或N/A），是 not applicable 的缩写，意思是“不适用”
19、浮点数值，就是该数值中必须包含一个小数点，并且小数点后面必须至少有一位数字
20、var floatNum3 = .1; // 有效，但不推荐
21、var floatNum2 = 10.0; // 整数——解析为 10
22、ECMAScript 能够表示的最小、最大数值分别保存在 Number.MIN_VALUE Number.MAX_VALUE 中，详见 3.4.5 第 2 节
23、特殊的数值 Infinity（正无穷） -Infinity（负无穷） NaN（非数值）
24、有 3 个函数可以把非数值转换为数值： Number() 、 parseInt() 和 parseFloat()，规则详见 3.4.5 第 4 节
25、要把一个值转换为一个字符串有两种方式： toString() 方法和转型函数 String()，详见 3.4.6 第 3 节
26、在 ECMAScript 中 Object 是所有对象的基础，属性方法详见 3.4.7 节，不过不一定适用于 JavaScript 宿主对象
27、用于操作数据值的符号称为操作符，包括算术操作符（如加号和减号）、位操作符、关系操作符和相等操作符，能够适用于很多值，例如字符串、数字值、布尔值，甚至对象
28、对于有符号的整数，32 位中的前 31 位用于表示整数的值。第 32 位用于表示数值的符号：0 表示正数，1 表示负数
29、正数以纯二进制格式存储，31 位中的每一位都表示 2 的幂，没有用到的位以 0 填充
30、负数同样以二进制码存储，但使用的格式是二进制补码
31、计算一个数值的二进制补码，需要经过 3 个步骤：1、求绝对值 2、求二进制反码 3、加 1
32、按位非（~）操作的本质：操作数的负值减 1
33、按位与（ & ）操作只在两个数值的对应位都是 1 时才返回 1，任何一位是 0，结果都是 0
34、按位或（|）操作在有一个位是 1 的情况下就返回 1，而只有在两个位都是 0的情况下才返回 0
35、按位异或（^）操作在两个数值对应位上只有一个 1 时才返回 1，如果两位一样都是 1 或都是 0，则返回 0
36、左移，有符号右移，无符号右移
37、逻辑非（!）操作符可用于任何数据类型的值，都会返回一个布尔值
38、逻辑与（&&）操作可以应用于任何类型的操作数，当有一个操作数不是布尔值时，不一定会返回布尔值，详见 3.5.3 第 2 节
39、在对非数值应用一元操作符时，该操作符会像 Number() 转型函数一样对这个值执行转换
40、对非数值应用位操作符，会先使用 Number() 函数将该值转换为一个数值
41、乘性计算的某个操作数不是数值，后台会先使用 Number() 转型函数将其转换为数值
42、加操作符计算结果可能是数值或字符串，减操作符只会是数值
43、小于（<）、大于（>）、小于等于（<=）和大于等于（>=）这几个操作符都返回一个布尔值（操作数都是字符串时是按字符编码值进行比较）
44、任何操作数与 NaN 进行关系比较，结果都是 false（NaN < 3 结果为 false，NaN >= 3 结果也为 false）
45、相等和不相等——先转换再比较，全等和不全等——仅比较而不转换，具体转换规则详见 3.5.7 节
46、使用复合赋值（+= -= *=）操作符不会带来任何性能的提升
47、逗号操作符在用于赋值时，总会返回表达式中的最后一项
48、语句：if  do-while  while  for  for-in  label  break/continue  with  switch-case
49、可以在 switch 语句中使用任何数据类型，每个 case 的值可以是常量、变量或表达式
50、switch 语句在比较值时使用的是全等操作符，因此不会发生类型转换
51、ECMAScirpt 函数没有签名，可以传递任意数量的参数，并且可以通过 arguments 对象来访问，没有传递值的命名参数将自动被赋予 undefined 值
52、ECMAScript 中的所有参数传递的都是值，不可能通过引用传递参数
